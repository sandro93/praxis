Epistolary Python
*****************

This is a collection of the notes I take and the sample code I read or
think about while learning Python. It may grow to anything, as long as
I keep improving it.

   Before it is large enough to be greatly revised, organized and
expanded, it will contain the information I find particularly useful
while learning Python, so that I have many useful instructions easily
at hand. Another use is to challenge myself to provide the written
recollections on the subjects I learn. That will log and record my
progress as well as serving a material for revising.

1 Parsing Command-line Arguments
********************************

### An exapmmple: import argparse

   parser = argparse.ArgumentParser(description='Process some
integers.')  parser.add_argument('integers', metavar='N', type=int,
nargs='+', help='an integer for the accumulator')
parser.add_argument('-sum', dest='accumulate',    action='store_const',
const=sum, default=max, help='sum the    integers (default: find the
max)')

   args = parser.parse_args() print(args.accumulate(args.integers))

   ### Argument parser initialisation: `       parser =
argparse.ArgumentParser(description='Process some       integers.')  '

   """ The add_argument() method `
ArgumentParser.add_argument(name or flags...[, action, nargs,
const][, default][, type][, choices][, required][, help][,
metavar][, dest])'

   name or flags like "foo" or -foo" action - The basic type of
action to be taken whe this argument is encountered at the
command line.

   default type - to which it is te be conveted choices - A
container of the allowable values for the argument.  required
help metavar - a name for the argument in usauge messages.  dest
- The name of the attribute to be added to the object returned       by
"parse_args()

   """ # an optional argument could be created like this:
parser.add_argument('-f', '-foo') # while the positional argument could
be created like:       parser.add_argument('egg') ### When
"parse_args()" is called, optional arguments will be ### identified by
the "-" prefix, and the rest will be assumed to be ##positional

   nargs: "' One of the more common uses of "nargs='?'" is to allow
optional   input and output files:   "'      >>> parser =
argparse.ArgumentParser()      >>> parser.add_argument('infile',
nargs='?', type=argparse.FileType('r'),      ...
default=sys.stdin)      >>> parser.add_argument('outfile', nargs='?',
type=argparse.FileType('w'),      ...
default=sys.stdout)      >>> parser.parse_args(['input.txt',
'output.txt'])      Namespace(infile=<_io.TextIOWrapper
name='input.txt' encoding='UTF-8'>,
outfile=<_io.TextIOWrapper name='output.txt' encoding='UTF-8'>)
>>> parser.parse_args([])      Namespace(infile=<_io.TextIOWrapper
name='<stdin>' encoding='UTF-8'>,
outfile=<_io.TextIOWrapper name='<stdout>' encoding='UTF-8'>)

2 Decorators
************

What I have learned today about decorators in python.

   You have to define a function which wraps the other function, that
is, it takes it as an argument, constructs a new function and then
returns. The syntax for actual wrapping is as follows:
     # A decorator function
     def trace(f):
         def helper(x):
         	print("calling {0} for {1}".format(f.__name__, x)
     	result = f(x)
     	return result
         return helper

   # The function you want to be decorated ` @trace def square(x):
return x * x '

   There is some more I could read about the decorators, but I do not
feel like it. It must be quite useful though, to decorate the functions
using the classes, that would help you to call decorators with
arguments which apply to them, not to the function being decorated.
Also, that way you can send more than one positional arguments to the
function being called.

3 Closures and Generators
*************************

Here is an ag

  1. This is the first item.

  2. This is the second item.

Closures and Generators
***********************

Epistolary Python
*****************

This is a collection of the notes I take and the sample code I read or
think about while learning Python. It may grow to anything, as long as
I keep improving it.

   Before it is large enough to be greatly revised, organized and
expanded, it will contain the information I find particularly useful
while learning Python, so that I have many useful instructions easily
at hand. Another use is to challenge myself to provide the written
recollections on the subjects I learn. That will log and record my
progress as well as serving a material for revising.

1 Parsing Command-line Arguments
********************************

### An exapmmple: import argparse

   parser = argparse.ArgumentParser(description='Process some
integers.')  parser.add_argument('integers', metavar='N', type=int,
nargs='+', help='an integer for the accumulator')
parser.add_argument('-sum', dest='accumulate',    action='store_const',
const=sum, default=max, help='sum the    integers (default: find the
max)')

   args = parser.parse_args() print(args.accumulate(args.integers))

   ### Argument parser initialisation: `       parser =
argparse.ArgumentParser(description='Process some       integers.')  '

   """ The add_argument() method `
ArgumentParser.add_argument(name or flags...[, action, nargs,
const][, default][, type][, choices][, required][, help][,
metavar][, dest])'

   name or flags like "foo" or -foo" action - The basic type of
action to be taken whe this argument is encountered at the
command line.

   default type - to which it is te be conveted choices - A
container of the allowable values for the argument.  required
help metavar - a name for the argument in usauge messages.  dest
- The name of the attribute to be added to the object returned       by
"parse_args()

   """ # an optional argument could be created like this:
parser.add_argument('-f', '-foo') # while the positional argument could
be created like:       parser.add_argument('egg') ### When
"parse_args()" is called, optional arguments will be ### identified by
the "-" prefix, and the rest will be assumed to be ##positional

   nargs: "' One of the more common uses of "nargs='?'" is to allow
optional   input and output files:   "'      >>> parser =
argparse.ArgumentParser()      >>> parser.add_argument('infile',
nargs='?', type=argparse.FileType('r'),      ...
default=sys.stdin)      >>> parser.add_argument('outfile', nargs='?',
type=argparse.FileType('w'),      ...
default=sys.stdout)      >>> parser.parse_args(['input.txt',
'output.txt'])      Namespace(infile=<_io.TextIOWrapper
name='input.txt' encoding='UTF-8'>,
outfile=<_io.TextIOWrapper name='output.txt' encoding='UTF-8'>)
>>> parser.parse_args([])      Namespace(infile=<_io.TextIOWrapper
name='<stdin>' encoding='UTF-8'>,
outfile=<_io.TextIOWrapper name='<stdout>' encoding='UTF-8'>)

2 Decorators
************

What I have learned today about decorators in python.

   You have to define a function which wraps the other function, that
is, it takes it as an argument, constructs a new function and then
returns. The syntax for actual wrapping is as follows:
     # A decorator function
     def trace(f):
         def helper(x):
         	print("calling {0} for {1}".format(f.__name__, x)
     	result = f(x)
     	return result
         return helper

   # The function you want to be decorated ` @trace def square(x):
return x * x '

   There is some more I could read about the decorators, but I do not
feel like it. It must be quite useful though, to decorate the functions
using the classes, that would help you to call decorators with
arguments which apply to them, not to the function being decorated.
Also, that way you can send more than one positional arguments to the
function being called.

3 Closures and Generators
*************************

Here is an ag

  1. This is the first item.

  2. This is the second item.

Closures and Generators
***********************

