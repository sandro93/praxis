### An exapmmple: import argparse

   parser = argparse.ArgumentParser(description='Process some
   integers.')  parser.add_argument('integers', metavar='N', type=int,
   nargs='+', help='an integer for the accumulator')
   parser.add_argument('--sum', dest='accumulate',
   action='store_const', const=sum, default=max, help='sum the
   integers (default: find the max)')

   args = parser.parse_args() print(args.accumulate(args.integers))

### Argument parser initialisation:

      parser = argparse.ArgumentParser(description='Process some
      integers.')

""" The add_argument() method

      ArgumentParser.add_argument(name or flags...[, action, nargs,
      const][, default][, type][, choices][, required][, help][,
      metavar][, dest])

      name or flags like ``foo`` or --foo`` action - The basic type of
      action to be taken whe this argument is encountered at the
      command line.

      default type - to which it is te be conveted choices - A
      container of the allowable values for the argument.  required
      help metavar - a name for the argument in usauge messages.  dest
      - The name of the attribute to be added to the object returned
      by ``parse_args()



"""
# an optional argument could be created like this:
      parser.add_argument('-f', '--foo')
# while the positional argument could be created like:
      parser.add_argument('egg')
### When ``parse_args()`` is called, optional arguments will be
### identified by the ``-`` prefix, and the rest will be assumed to be
##positional


nargs:
''' One of the more common uses of ``nargs='?'`` is to allow optional
  input and output files:
  '''
     >>> parser = argparse.ArgumentParser()
     >>> parser.add_argument('infile', nargs='?', type=argparse.FileType('r'),
     ...                     default=sys.stdin)
     >>> parser.add_argument('outfile', nargs='?', type=argparse.FileType('w'),
     ...                     default=sys.stdout)
     >>> parser.parse_args(['input.txt', 'output.txt'])
     Namespace(infile=<_io.TextIOWrapper name='input.txt' encoding='UTF-8'>,
               outfile=<_io.TextIOWrapper name='output.txt' encoding='UTF-8'>)
     >>> parser.parse_args([])
     Namespace(infile=<_io.TextIOWrapper name='<stdin>' encoding='UTF-8'>,
               outfile=<_io.TextIOWrapper name='<stdout>' encoding='UTF-8'>)

